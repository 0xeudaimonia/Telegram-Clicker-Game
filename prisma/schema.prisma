// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model AdminUser {
  id              Int           @id @default(autoincrement())
  username        String?
  email           String?       @unique
  password        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model User {
  id              Int           @id @default(autoincrement())
  telegramId      String        @unique
  username        String?
  createdAt       DateTime      @default(now())
  data            Json?
  referralCode    String        @unique
  referralToken   String?
  Game            Game[]
  BonusHistory    BonusHistory[]
  ReferralUser    ReferralUser[]
}

model Game {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  score           Int           @default(0)
  level           Int           @default(1)
  points          Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ReferralUser {
  id              Int           @id @default(autoincrement())
  userId          Int           @unique
  referrerId      Int?
  createdAt       DateTime      @default(now())
  User            User          @relation(fields: [userId], references: [id])
}

model BonusHistory {
  id              Int           @id @default(autoincrement())
  type            Int
  bonusType       BonusType     @relation(fields: [type], references: [id])
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  from            String
  rewards         Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model BonusType {
  id              Int           @id @default(autoincrement())
  title           String
  description     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bonusSettings   BonusSeting[]
  bonusHistory    BonusHistory[]
}

model BonusSeting {
  id              Int           @id @default(autoincrement())
  type            Int
  bonusType       BonusType     @relation(fields: [type], references: [id])
  data            String
  points          Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

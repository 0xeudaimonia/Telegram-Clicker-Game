// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               Int                @id @default(autoincrement())
  telegramId       Int                @unique
  username         String?
  createdAt        DateTime           @default(now())
  data             Json?
  referralCode     String             @unique
  referralToken    String?
  Game             Game[]
  ReferralCode     ReferralCode[]
  Bonus            Bonus[]
  VideoBonus       VideoBonus[]
  dailyRewardClaim dailyRewardClaim[]
  ReferralUser     ReferralUser[]
}

model Game {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  score     Int      @default(0)
  level     Int      @default(1)
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReferralCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReferralUser {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  referrerId Int?
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
}

model Bonus {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  score     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model video {
  id          Int          @id @default(autoincrement())
  video_url   String
  title       String
  description String
  code        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  VideoBonus  VideoBonus[]
}

model VideoBonus {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  platform  String
  videoId   Int
  video     video    @relation(fields: [videoId], references: [id])
  claimed   Boolean  @default(false)
  videoType String
  createdAt DateTime @default(now())
}

model dailyReward {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model dailyRewardClaim {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  day       Int
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
